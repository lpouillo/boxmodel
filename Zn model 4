
#Modèle en construction pour l'article 
#Modeling the Zn isotope metabolism in human body : perspectives for bioarcheological studies (K.Jaouen, L. Pouilloux et al.)

#Cet article utilise 4 modèles permettant de prédire la composition isotopique des cellules rouges en fonction de l'alimentation et de divers paramètres métaboliques
#Le programme présenté ici concerne l'un des 4 modèles, et vise à tester simultanément l'effet de la quantite de Zinc consommée par jour et le % de ZInc absorbé par l'organisme
#Le programme ne fonctionne pas pour le moment. Visiblement je réalise une mauvaise utilisation de la fonction odeint ou une mauvaise construction de la double boucle





#!/usr/bin/python
# -*- coding: utf-8 -*-
''' 


Programme permettant de calculer les delta finaux pour les RBC en fonction des variations
de la quantité de zinc consommée par jour et le % d'absorption intestinale de zinc
'''

from scipy.integrate import odeint
from random import gauss
from pylab import *

# Definition de la fonction d'evolution
def evol_ratio(ratio,t):
  rationew=np.zeros(ratio.size)
	for ii in range(ratio.size):
		outflux=0;
		influx=0;
		for jj in range(ratio.size):
			# le nouveau ratio est calcule a partir des flux entrants et sortants
			outflux = outflux + flux[ii][jj]/Mass[ii]*array_coeff[ii][jj]*ratio[ii]
			influx = influx + flux[jj][ii]/Mass[ii]*array_coeff[jj][ii]*ratio[jj]
		rationew[ii]= influx - outflux
	return rationew;

''' 
Parametres communs a chaque simulation 
'''

Ratio_standard_JMC=0.0637 # rapport isotopique du standard JMC
n_timestep=100000
time = np.linspace(0, 13870.0, n_timestep) # temps

# Conditions initiales des boites

#Delta={"diet": 0.5e0, "plasma": 0.17e0, "RBC": 0.42e0, "liver": -1.05e0, "urine": 0.17e0, "feces": 0.4e0, "muscle": -0.4e0, "bone": 0.55e0, "skin": -0.18e0, "kidney":-0.7e0}
#Delta={"diet": -0.1e0, "plasma": 0.0e0, "RBC": 0.5e0, "liver": 0e0, "urine": 0.0e0, "feces": 0.0e0, "muscle": 0.0e0, "bone": 0.0e0, "skin": 0.0e0, "kidney":0e0}


#Delta des réservoirs
Delta={"diet": 0.3, "plasma": 0.0e0, "RBC": 0.0e0, "liver": 0e0, "urine": 0.0e0, "feces": 0.0e0, "muscle": 0.0e0, "bone": 0.0e0, "skin": 0.0e0, "kidney":0e0}
Boxes=Delta.keys()
Delta=array(Delta.values())
Ratio=[];
for ii in range(Delta.size):
        Ratio.append((Delta[ii]/1e3+1e0)*Ratio_standard_JMC)
Ratio=array(Ratio);

#Masses des réservoirs

Mass={"diet": 1e12,  "plasma": 3e0, "RBC": 2.5e1, "liver": 1.3e2, "urine": 1e-10, "feces": 1e-0, "muscle": 1.5e3, "bone": 7.7e2, "skin": 1.6e2, "kidney":2e1}
Boxes=Mass.keys()
print Boxes
Mass=array(Mass.values())


# Coefficients de partage
coeff_DP=1.00025e0;
#coeff_KU=1/0.9993e0;
coeff_KU=1/0.99955e0;
coeff_PRBC=1.00025e0
coeff_PS=0.9994;
coeff_PM=0.99993;
coeff_PB=1.000325;
coeff_PL=0.9994;
coeff_PD=1.0002;

data_coeff={
		"diet": {"diet":1.0, "plasma": coeff_DP, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone": 1e0, "skin": 1e0, "kidney":1e0},
		"plasma": {"diet":1.0, "plasma": 1e0, "RBC": coeff_PRBC, "liver": coeff_PL, "urine": 1e0, "feces": coeff_PD, "muscle": coeff_PM, "bone":coeff_PB, "skin": coeff_PS, "kidney":1/coeff_KU},
		"RBC": {"diet": 1.0,"plasma": 1e0, "RBC": 1e0, "liver": 1/coeff_PRBC, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"liver": {"diet": 1.0,"plasma": 1/coeff_PL, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"urine": {"diet": 1.0,"plasma": 1e0, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"feces": {"diet": 1.0,"plasma": 1e0, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"muscle": {"diet": 1.0,"plasma": 1/coeff_PM, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"bone": {"diet": 1.0,"plasma": 1/coeff_PB, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"skin": {"diet": 1.0,"plasma": 1e0, "RBC": 1e0, "liver": 1e0, "urine": 1e0, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0},
		"kidney": {"diet": 1.0,"plasma": coeff_KU, "RBC": 1e0, "liver": 1e0, "urine": coeff_KU, "feces": 1e0, "muscle": 1e0, "bone":1e0, "skin": 1e0, "kidney":1e0}}

# tranformation en list puis en array des coefficients de partage
list_coeff=[]
for box in data_coeff.values():
	list_coeff.append(box.values()) 
array_coeff=array(list_coeff);

''' 
Parametres specificiques pour chaque simulation
- variation de la masse du foie
- variation du flux de la diette vers le plasma
''' 
# definition de la gamme d'absorption
absorption_min=0e0
absorption_max=1e0
n_absorption=2
absorption=np.linspace(1,1,1)


# definition de la gamme de flux
flux_min=0.0
flux_max=12
n_flux=20
flux_diet=np.linspace(flux_min, flux_max, n_flux)
flux_FB=0.005;


# Creation du tableau pour recevoir les donnees absicce premier, ordonnee dans le range()
delta_RBC_final= [[None] * n_flux for i in range(n_absorption)]
#delta_bone_final= [[None] * n_flux for i in range(n_delta)]

## Debut des simulations 
for i_absorption in range(absorption.size):
	


        for i_flux in range(flux_diet.size):
        # boucle sur le second parametre
		
   
          
		
		# Flux entre les boites

                data_flux={
                        "diet": {"diet": 0.0, "plasma": absorption[i_absorption]*flux_diet[i_flux], "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 1-absorption[i_absorption]*flux_diet[i_flux], "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
			"plasma": {"diet": 0.0, "plasma": 0e0, "RBC": 0.18e0, "liver": 2.64e0, "urine": 0e0, "feces": 0.75*absorption[i_absorption]*flux_diet[i_flux], "muscle": 0.0035e0, "bone": flux_FB, "skin": 0.125*absorption[i_absorption]*flux_diet[i_flux], "kidney":0.625*absorption[i_absorption]*flux_diet[i_flux]},
                        "RBC": {"diet": 0.0,"plasma": 0.18e0, "RBC": 0e0, "liver": 0.0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "liver": {"diet": 0.0,"plasma": 2.64e0, "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "urine": {"diet": 0.0,"plasma": 0e0, "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "feces": {"diet": 0.0, "plasma": 0e0, "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "muscle": {"diet": 0.0,"plasma": 0.0035e0, "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "bone": {"diet": 0.0, "plasma": flux_FB, "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "skin": {"diet": 0.0, "plasma": 0e0, "RBC": 0e0, "liver": 0e0, "urine": 0e0, "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0},
                        "kidney": {"diet": 0.0,"plasma": 0.5*absorption[i_absorption]*flux_diet[i_flux], "RBC": 0e0, "liver": 0e0, "urine": 0.125*absorption[i_absorption]*flux_diet[i_flux], "feces": 0e0, "muscle": 0e0, "bone": 0e0, "skin": 0e0, "kidney":0e0}}
	
                # tranformation en list puis en array
		list_flux=[]
		for box in data_flux.values():
			list_flux.append(box.values())
		flux=array(list_flux);
		
		Ratio=odeint(evol_ratio,Ratio,time)
		
                delta_RBC_final[i_absorption][i_flux]=((Ratio[n_timestep-1][4]/Ratio_standard_JMC)-1.0)*1000;
                #delta_bone_final[i_delta][i_flux]=((Ratio[n_timestep-1][7]/Ratio_standard_JMC)-1.0)*1000;

 # creation des figures
V=arange(-0.1,1.8,0.1)
p1=contourf(flux_diet,absorption, delta_RBC_final)
#p2=imshow(delta_RBC_final)
#p2=contourf(delta_D,flux_FB,delta_bone_final)
#xlabel(r"Menses $(mg.day^{-1})$")

ylabel(r"d66Zndiet$(per mil)$")
xlabel(r"$flux_diet(mg/d)$")

colorbar(fraction=0.1)
show()
                    

plt.show()
